
#
# Download all client configuration to control machine
#

- ansible.builtin.fetch:
    src: /etc/openvpn/client.ovpn
    dest: '{{ inventory_dir }}/data/client.ovpn'
    flat: true

- ansible.builtin.fetch:
    src: /etc/openvpn/auth.key
    dest: '{{ inventory_dir }}/data/auth.key'
    flat: true

- ansible.builtin.file:
    path: '{{ inventory_dir }}/data/auth.key'
    mode: '0600'
  delegate_to: localhost

- ansible.builtin.fetch:
    src: /etc/openvpn/ca/root.crt
    dest: '{{ inventory_dir }}/data/root.crt'
    flat: true

- ansible.builtin.fetch:
    src: '/etc/openvpn/certs/clients/{{ item.username }}/client.key'
    dest: '{{ inventory_dir }}/data/clients/{{ item.username }}/client.key'
    flat: true
  with_items: '{{ vpn_clients }}'

- ansible.builtin.file:
    path: '{{ inventory_dir }}/data/clients/{{ item.username }}/client.key'
    mode: '0600'
  with_items: '{{ vpn_clients }}'
  delegate_to: localhost

- ansible.builtin.fetch:
    src: '/etc/openvpn/certs/clients/{{ item.username }}/client.crt'
    dest: '{{ inventory_dir }}/data/clients/{{ item.username }}/client.crt'
    flat: true
  with_items: '{{ vpn_clients }}'

- block:
  
  - name: Create a tar bundle for each VPN client
    ansible.builtin.command:
      cmd: >-
        tar cf "clients/{{ item.username }}.tar" "root.crt" "client.ovpn" "auth.key" -C "clients/{{ item.username }}/" .
      chdir: '{{ inventory_dir }}/data'
      creates: 'clients/{{ item.username }}.tar'
    with_items: '{{ vpn_clients }}'
  
  - name: Encrypt config bundle for each VPN client (with client's PGP key)
    ansible.builtin.command:
      cmd: >-
        gpg --batch --encrypt -v -r {{ item.email }} clients/{{ item.username }}.tar
      chdir: '{{ inventory_dir }}/data'
      creates: 'clients/{{ item.username }}.tar.gpg'
    with_items: '{{ vpn_clients }}'
    when: >-
      encrypt_config_bundle_with_gpg_key
  
  - name: Encrypt config bundle for each VPN client (with a symmetric key unique for each client)
    ansible.builtin.command:
      cmd: >-
        gpg --batch --symmetric -v --passphrase "{{ passphrase }}" clients/{{ item.username }}.tar
      chdir: '{{ inventory_dir }}/data'
      creates: 'clients/{{ item.username }}.tar.gpg'
    with_items: '{{ vpn_clients }}'
    vars:
      passphrase_file: '{{ inventory_dir }}/secrets/clients/{{ item.username }}/archive-password'
      passphrase: '{{ lookup("password", passphrase_file, chars=["ascii_letters", "digits"], length=15) }}'
    when: >-
      not (encrypt_config_bundle_with_gpg_key)

  delegate_to: localhost
  become: false

